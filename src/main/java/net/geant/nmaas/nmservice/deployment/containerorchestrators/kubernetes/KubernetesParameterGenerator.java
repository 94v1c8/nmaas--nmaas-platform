package net.geant.nmaas.nmservice.deployment.containerorchestrators.kubernetes;

import lombok.RequiredArgsConstructor;
import org.apache.commons.lang3.RandomStringUtils;

import java.util.HashMap;
import java.util.Map;

@RequiredArgsConstructor
class KubernetesParameterGenerator {

    private static final String HEXADECIMAL_PATTERN = "1234567890abcdef";
    private static final String RANDOM_ARGUMENT_EXPRESSION_PREFIX = "RANDOM_";

    static Map<String, String> createAdditionalGlobalParametersMap(Map<String, String> globalDeployParameters) {
        Map<String, String> additionalParameters = new HashMap<>();
        globalDeployParameters.forEach((k, v) -> additionalParameters.put(k, createParameterValueString(v, additionalParameters)));
        return additionalParameters;
    }

    private static String createParameterValueString(String value, Map<String, String> additionalParameters) {
        // verify if parameter needs to be autogenerated
        if (value.contains("%" + RANDOM_ARGUMENT_EXPRESSION_PREFIX)) {
            String randomExpression = value.split("%")[1];
            String randomValue = "";
            // verify if an already generated value can be used or generate new one
            if (additionalParameters.containsKey(randomExpression)) {
                randomValue = additionalParameters.get(randomExpression);
            } else if (randomExpression.contains("STRING")) {
                int randomStringLength = Integer.parseInt(randomExpression.replace("RANDOM_STRING_", ""));
                randomValue = RandomStringUtils.randomAlphanumeric(randomStringLength);
                // store generated value to be used for subsequent parameters
                additionalParameters.put(randomExpression, randomValue);
            } else if (randomExpression.contains("HEX")) {
                int randomStringLength = Integer.parseInt(randomExpression.replace("RANDOM_HEX_", ""));
                randomValue = RandomStringUtils.random(randomStringLength, HEXADECIMAL_PATTERN);
                additionalParameters.put(randomExpression, randomValue);
            } else if (randomExpression.contains("NUMBER")) {
                int randomStringLength = Integer.parseInt(randomExpression.replace("RANDOM_NUMBER_", ""));
                randomValue = RandomStringUtils.randomNumeric(randomStringLength);
                additionalParameters.put(randomExpression, randomValue);
            }
            return value.replace("%" + randomExpression + "%", randomValue);
        }
        return value;
    }
}
