plugins {
    id 'java'
    id 'idea'
    id 'jacoco'
    id 'org.springframework.boot' version '2.4.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "com.gorylenko.gradle-git-properties" version "2.2.3"
    id "org.sonarqube" version "3.0"
    id 'com.google.protobuf' version "0.8.13"
}

repositories {
    mavenCentral()
}

version = '1.4.4-SNAPSHOT'
group = 'net.geant.nmaas'

sourceCompatibility = 1.8
targetCompatibility = 1.8

gitProperties {
    gitPropertiesDir = "src/main/resources"
    dotGitDirectory = ".git"
    keys = ['git.branch', 'git.commit.time', 'git.commit.id.abbrev', 'git.build.version']
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.13.0"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.31.1'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

bootJar {
    mainClassName = 'net.geant.nmaas.MainConfig'
}

springBoot {
    buildInfo()
}

sourceSets {
    integrationTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    integrationTestImplementation.extendsFrom implementation
    integrationTestRuntimeOnly.extendsFrom runtimeOnly

    compileOnly {
        extendsFrom annotationProcessor
    }

    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude group: 'ch.qos.logback', module: 'logback-classic'
    }
}

dependencies {
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    integrationTestCompileOnly 'org.projectlombok:lombok'
    integrationTestAnnotationProcessor 'org.projectlombok:lombok'

    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-mail')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.boot:spring-boot-devtools')
    implementation('org.springframework.boot:spring-boot-starter-quartz')
    implementation('org.springframework.boot:spring-boot-starter-log4j2')
    implementation('org.springframework.boot:spring-boot-starter-validation')

    implementation('io.micrometer:micrometer-registry-prometheus:1.6.5')

    implementation('org.modelmapper:modelmapper:2.4.0')
    implementation('org.modelmapper.extensions:modelmapper-spring:2.4.0')
    implementation('org.apache.commons:commons-lang3:3.12.0')
    implementation('commons-io:commons-io:2.8.0')

    runtimeOnly('com.h2database:h2')
    runtimeOnly('org.postgresql:postgresql')

    implementation('org.hibernate:hibernate-envers')
    implementation('org.flywaydb:flyway-core:5.2.4')

    implementation('io.jsonwebtoken:jjwt:0.9.1')
    implementation('com.hierynomus:sshj:0.31.0')
    implementation('org.gitlab4j:gitlab4j-api:4.15.7')
    implementation('org.freemarker:freemarker:2.3.30')

    implementation('com.google.protobuf:protobuf-java:3.13.0')
    implementation('io.grpc:grpc-netty-shaded:1.31.1')
    implementation('io.grpc:grpc-protobuf:1.31.1')
    implementation('io.grpc:grpc-stub:1.31.1')
    implementation('io.fabric8:kubernetes-client:4.11.1')

    testCompile('org.mockito:mockito-inline:3.8.0')
    testImplementation('org.springframework.boot:spring-boot-starter-test')

    integrationTestImplementation('org.springframework.boot:spring-boot-starter-test')
    integrationTestImplementation('org.springframework.security:spring-security-test')
}

test {
    useJUnitPlatform()
    systemProperties 'property': 'value'
    ignoreFailures = true
    afterTest { desc, result ->
        println "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
    jacoco {
        destinationFile = file("$buildDir/jacoco/test.exec")
        excludes = [
                '**/inventory/janitor/**',
                '**/exception/**',
                '**/exceptions/**'
        ]
    }
}

task integrationTestOnly(type: Test) {
    useJUnitPlatform()
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    afterTest { desc, result ->
        println "Executing itest ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
    jacoco {
        destinationFile = file("$buildDir/jacoco/integrationTest.exec")
        excludes = [
                '**/inventory/janitor/**',
                '**/exception/**',
                '**/exceptions/**'
        ]
    }
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    afterTest { desc, result ->
        println "Executing itest ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
    jacoco {
        destinationFile = file("$buildDir/jacoco/integrationTest.exec")
        excludes = [
                '**/inventory/janitor/**',
                '**/exception/**',
                '**/exceptions/**'
        ]
    }
    dependsOn(test)
}

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/jacoco")
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
    executionData(test, integrationTest)
    // exclude generated protobuf rpc
    // https://stackoverflow.com/a/54213986
    // https://github.com/grpc/grpc-java/pull/7382
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/inventory/janitor/**',])
        }))
    }

}

jacocoTestCoverageVerification {
    executionData(test, integrationTest)
    // exclude generated protobuf rpc
    // https://stackoverflow.com/a/54213986
    // https://github.com/grpc/grpc-java/pull/7382
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/inventory/janitor/**',])
        }))
    }
    violationRules {
        rule {
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.6
            }
        }
        rule {
            element = 'PACKAGE'
            includes = [
                    'net.geant.nmaas.portal.**'
            ]
            excludes = [
                    '**.model*',
                    '**.exceptions**',
                    '**.exception**'
            ]
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.5
            }
        }
        rule {
            element = 'PACKAGE'
            includes = [
                    'net.geant.nmaas.orchestration.**'
            ]
            excludes = [
                    '**.model*',
                    '**.exceptions**'
            ]
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.3
            }
        }
    }
}

integrationTest.finalizedBy(jacocoTestCoverageVerification)
jacocoTestCoverageVerification.finalizedBy(jacocoTestReport)

sonarqube {
    properties {
        property "sonar.coverage.exclusions", ["**/inventory/janitor/**","**/exception/**","**/exceptions/**"]
        properties["sonar.tests"] += sourceSets.integrationTest.allSource.srcDirs
    }
}
