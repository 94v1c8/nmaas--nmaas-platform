apply from: '../reactor/build.gradle'
apply plugin: 'org.springframework.boot'
apply plugin: "com.gorylenko.gradle-git-properties"

buildscript {
	repositories {
		mavenCentral()
		maven{
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath('org.springframework.boot:spring-boot-gradle-plugin:1.5.10.RELEASE')
		classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.5.1"
	}
}

gitProperties {
	gitPropertiesDir = "src/main/resources"
}

jar {
	baseName = 'nmaas-platform'
}

sourceSets {
	integrationTest {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/integration-test/java')
		}
		resources.srcDir file('src/integration-test/resources')
	}
}

configurations {
	integrationTestCompile.extendsFrom testCompile
	integrationTestRuntime.extendsFrom testRuntime
	all {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-devtools')

	compile('org.modelmapper:modelmapper:1.1.0')
	compile('org.modelmapper.extensions:modelmapper-spring:1.1.0')
	
	runtime('com.h2database:h2')
	runtime('mysql:mysql-connector-java')
	runtime('org.postgresql:postgresql')
	
	compile('io.jsonwebtoken:jjwt:0.7.0')
	compile('com.spotify:docker-client:8.8.0')
	compile('org.freemarker:freemarker:2.3.20')
	compile('com.hierynomus:sshj:0.21.1')
	compile('org.gitlab4j:gitlab4j-api:4.8.30')
	compile('io.fabric8:kubernetes-client:3.1.8')
	compile('com.google.guava:guava:23.0')

	compile('io.springfox:springfox-swagger2:2.8.0')
	compile('io.springfox:springfox-swagger-ui:2.8.0')
    compile ('org.apache.logging.log4j:log4j-api:2.11.1')
    compile ('org.apache.logging.log4j:log4j-core:2.11.1')


	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.security:spring-security-test:4.2.1.RELEASE')
}

task integrationTest(type: Test) {
	testClassesDir = sourceSets.integrationTest.output.classesDir
	classpath = sourceSets.integrationTest.runtimeClasspath
	outputs.upToDateWhen { false }
	afterTest { desc, result ->
		println "Executing itest ${desc.name} [${desc.className}] with result: ${result.resultType}"
	}
}

jacocoTestReport {
	reports {
		xml.enabled false
		csv.enabled false
		html.destination "${buildDir}/reports/jacoco/jacocoHtml"
	}
	executionData(test, integrationTest)
}

// removed integrationTest task from build
// check.dependsOn integrationTest
integrationTest.mustRunAfter test