repositories {
	mavenCentral()
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.gorylenko.gradle-git-properties'
apply plugin: 'org.sonarqube'
apply plugin: 'com.google.protobuf'

version = '1.2.0'
group = 'net.geant.nmaas'

sourceCompatibility = 1.8
targetCompatibility = 1.8


buildscript {
	repositories {
		mavenCentral()
		maven{
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath('org.springframework.boot:spring-boot-gradle-plugin:2.1.5.RELEASE')
		classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.5.1"
		classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"
		classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.8'
	}
}

gitProperties {
	gitPropertiesDir = "src/main/resources"
}

protobuf {
	protoc {
		artifact = "com.google.protobuf:protoc:3.4.0"
	}
	plugins {
		grpc {
			artifact = 'io.grpc:protoc-gen-grpc-java:1.17.1'
		}
	}
	generateProtoTasks {
		all()*.plugins {
			grpc {}
		}
	}
}

bootJar {
	mainClassName = 'net.geant.nmaas.MainConfig'
}

sourceSets {
	integrationTest {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/integration-test/java')
		}
		resources.srcDir file('src/integration-test/resources')
	}
}

configurations {
	integrationTestCompile.extendsFrom testCompile
	integrationTestRuntime.extendsFrom testRuntime
	all {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
		exclude group: 'ch.qos.logback', module: 'logback-classic'
	}
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-mail')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-devtools')
	compile('org.springframework.boot:spring-boot-starter-quartz')
	compile('org.springframework.boot:spring-boot-starter-log4j2')

	compile('org.modelmapper:modelmapper:2.2.0')
	compile('org.modelmapper.extensions:modelmapper-spring:2.2.0')
	
	runtime('com.h2database:h2')
	runtime('org.postgresql:postgresql')

	compile('org.hibernate:hibernate-envers')
	compile('io.jsonwebtoken:jjwt:0.7.0')
	compile('com.spotify:docker-client:8.8.0')
	compile('org.freemarker:freemarker:2.3.28')
	compile('com.hierynomus:sshj:0.21.1')
	compile('org.gitlab4j:gitlab4j-api:4.9.18')
	compile('com.google.guava:guava:23.0')

	compile('io.springfox:springfox-swagger2:2.8.0')
	compile('io.springfox:springfox-swagger-ui:2.8.0')
	compile('org.projectlombok:lombok:1.18.2')
	compile('org.flywaydb:flyway-core:5.2.0')
	compile('com.google.protobuf:protobuf-java:3.6.0')
	compile('io.grpc:grpc-netty-shaded:1.17.1')
	compile('io.grpc:grpc-protobuf:1.17.1')
	compile('io.grpc:grpc-stub:1.17.1')

	testImplementation('org.junit.jupiter:junit-jupiter-api:5.4.0')
	testCompile('org.junit.jupiter:junit-jupiter-params:5.4.0')
	testRuntime('org.junit.jupiter:junit-jupiter-engine:5.4.0')
	testCompile('org.junit.platform:junit-platform-commons:1.4.0')
	testCompile("org.mockito:mockito-core:2.24.5")
	testCompile('org.mockito:mockito-junit-jupiter:2.24.5')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.security:spring-security-test')

	integrationTestImplementation('org.junit.jupiter:junit-jupiter-api:5.4.0')
	integrationTestCompile('org.junit.jupiter:junit-jupiter-params:5.4.0')
	integrationTestRuntime('org.junit.jupiter:junit-jupiter-engine:5.4.0')
	integrationTestCompile('org.junit.platform:junit-platform-commons:1.4.0')
	integrationTestCompile("org.mockito:mockito-core:2.24.5")
	integrationTestCompile('org.mockito:mockito-junit-jupiter:2.24.5')
	integrationTestCompile('org.springframework.security:spring-security-test')
}

test {
	useJUnitPlatform()
	systemProperties 'property': 'value'
	ignoreFailures = true
	afterTest { desc, result ->
		println "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
	}
	jacoco {
		append = true
		destinationFile = file("$buildDir/jacoco/test.exec")
	}
}

task integrationTest(type: Test) {
	useJUnitPlatform()
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
	outputs.upToDateWhen { false }
	afterTest { desc, result ->
		println "Executing itest ${desc.name} [${desc.className}] with result: ${result.resultType}"
	}
	dependsOn(test)
}

jacoco {
	toolVersion = "0.8.4"
	reportsDir = file("$buildDir/jacoco")
}

jacocoTestReport {
	reports {
		xml.enabled false
		csv.enabled false
		html.destination file("${buildDir}/jacocoHtml")
	}
	executionData(test, integrationTest)

	afterEvaluate {
		classDirectories = files(classDirectories.files.collect {
			fileTree(dir: it,
					excludes: [
							'**/inventory/janitor/**'
					])
		})
	}
}

jacocoTestCoverageVerification {
	afterEvaluate {
		classDirectories = files(classDirectories.files.collect {
			fileTree(dir: it,
					excludes: [
							'**/inventory/janitor/**',
							'**/exception/**',
							'**/exceptions/**'
					])
		})
	}
	executionData(test, integrationTest)
	violationRules {
		rule {
			limit {
				counter = 'INSTRUCTION'
				value = 'COVEREDRATIO'
				minimum = 0.6
			}
		}
		rule {
			element = 'PACKAGE'
			includes = [
			        'net.geant.nmaas.portal.**'
			]
			excludes = [
					'**.model*'
			]
			limit {
				counter = 'INSTRUCTION'
				value = 'COVEREDRATIO'
				minimum = 0.5
			}
		}
		rule {
			element = 'PACKAGE'
			includes = [
			        'net.geant.nmaas.orchestration.**'
			]
			excludes = [
					'**.model*'
			]
			limit {
				counter = 'INSTRUCTION'
				value = 'COVEREDRATIO'
				minimum = 0.3
			}
		}
	}
}

integrationTest.finalizedBy(jacocoTestCoverageVerification)

sonarqube {
	properties {
		property "sonar.jacoco.reportPaths", "${project.buildDir}/jacoco/test.exec,${project.buildDir}/jacoco/integrationTest.exec"
	}
}
